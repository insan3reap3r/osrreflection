{* Reflection Npc Functions

   This Contains all the current reflection functions relating to Npc's.
   Each idividual npc in runescape has a specific index number (two seperate chickens
   have different index.)  If it is a npc that doesn't die, then the index number will
   never change. If it is an npc that dies, then the index will change by around one
   number each time the hooks update.  For Npc's that die (monsters), Grab the index
   Number at the beggining of script with R_LoadNpcIndex. For an Npc Such as a banker,
   the NpcTool in Tools can grab the Index to be used in the script.


*}


(*
R_LoadNpcIndex
~~~~~~~~~~~~~~

.. code-block:: pascal

    R_LoadNpcIndex(Name: string):TintegerArray;

Searches the entire index for Npc's with the name given by "Npcname" that are
within our loaded plane(around 20-30 tiles) DO NOT RUN THIS IN A LOOP. This takes
a bit of time (10-20 seconds) and should only be called once at the beggining of
the script to load the indexes of each npc, or once when entering a new area of npc's.
The TIA containing the Index will then be called in the rest of the functions.

.. note::

  by elfyyy

*)
function R_LoadNpcIndex(NpcName: string):TintegerArray;
var
  i, k: Integer;
  TheNPC, TheNPCNode, NPCDef, TheBytes: integer;
  TheName: string;
begin
  Setlength(Result, 100);
  k := 0;
  for i := 0 to 32767 do
  begin
    TheNPCNode := SmartGetFieldArrayObject(SmartCurrentTarget, 0, HookNPCs, i);
    NPCDef := SmartGetFieldObject(SmartCurrentTarget, TheNPCNode, HookNPCDef);
    TheBytes := SmartGetFieldObject(SmartCurrentTarget, NPCDef, HookNPCName);
    TheName := Lowercase(Trim(R_GetJavaString(TheBytes, 512)));
    if TheName = '' then
    begin
      SmartFreeObject(SmartCurrentTarget, TheNPCNode);
      SmartFreeObject(SmartCurrentTarget, TheNPC);
      SmartFreeObject(SmartCurrentTarget, NPCDef);
      SmartFreeObject(SmartCurrentTarget, TheBytes);
      continue;
    end;
    begin
      if TheName = LowerCase(NpcName) then
      begin
      Result[k] := i;
      inc(k);
      end;
    end;
    SmartFreeObject(SmartCurrentTarget, TheNPCNode);
    SmartFreeObject(SmartCurrentTarget, TheNPC);
    SmartFreeObject(SmartCurrentTarget, NPCDef);
    SmartFreeObject(SmartCurrentTarget, TheBytes);
  end;
  result:= RemoveDeadTIA(result);
end;

(*
R_GetNpcsLoc
~~~~~~~~~~~~~~

.. code-block:: pascal

    R_GetNpcsLoc(IndexID:TintegerArray):TPointArray;

Returns all nearby Npc's Current Location with the Id given by
the Index Id.

.. note::

  by elfyyy

*)
function R_GetNpcsLoc(IndexID:TintegerArray):TPointArray;
var
  i, l, BaseX, BaseY, Node, Def: Integer;

begin
  BaseX := (SmartGetFieldInt(SmartCurrentTarget, 0, HookGetBaseX) * -2001773755);
  BaseY := (SmartGetFieldInt(SmartCurrentTarget, 0, HookGetBaseY) * -1712339069);
  l := high(IndexId);
  SetLength(Result, 100);
  for i := 0 to l do
  begin
    Node := SmartGetFieldArrayObject(SmartCurrentTarget, 0, HookNPCs, IndexID[i]);
    Def := SmartGetFieldObject(SmartCurrentTarget, Node, HookNPCDef);
    if Def = 0 then
    begin
      SmartFreeObject(SmartCurrentTarget, Node);
      SmartFreeObject(SmartCurrentTarget, Def);
      continue;
    end;
    SetLength(Result, (i + 1));
    result[i].x := (SmartGetFieldInt(SmartCurrentTarget, 0, HookGetBaseX) * HookGetBaseXMultiplier) + (SmartGetFieldInt(SmartCurrentTarget, Node, HookCharacterX) * HookCharacterXMultiplier) div 128;
    result[i].y := (SmartGetFieldInt(SmartCurrentTarget, 0, HookGetBaseY) * HookGetBaseYMultiplier) + (SmartGetFieldInt(SmartCurrentTarget, Node, HookCharacterY) * HookCharacterYMultiplier) div 128;
    SmartFreeObject(SmartCurrentTarget, Node);
    SmartFreeObject(SmartCurrentTarget, Def);
  end;
  SortTpaFrom(Result, Point(10000,10000));
  result:= RemoveDeadTPA(result);
end;

(*
R_GetNpcLoc
~~~~~~~~~~~~~~

.. code-block:: pascal

    R_GetNpcLoc(IndexID:TintegerArray):TPoint;

Returns Location of Given NPC

.. note::

  by elfyyy

*)
function R_GetNpcLoc(IndexID:integer):TPoint;
var
  temp: TPointArray;
begin
  Temp := R_GetNpcsLoc([IndexID]);
  if length(Temp) = 0 then
    exit;
  Result := Temp[0];
end;

(*
R_GetNpcHp
~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetNpcHp(IndexID:integer):integer;

Returns Current hp of given npc

.. note::

  by elfyyy

*)
function R_GetNpcHp(IndexID:integer):integer;
var
  Mid, BaseX, BaseY, Node: Integer;

begin
  BaseX := (SmartGetFieldInt(SmartCurrentTarget, 0, HookGetBaseX) * -2001773755);
  BaseY := (SmartGetFieldInt(SmartCurrentTarget, 0, HookGetBaseY) * -1712339069);
  Node := SmartGetFieldArrayObject(SmartCurrentTarget, 0, HookNPCs, IndexID);
  Mid := ((SmartGetFieldInt(SmartCurrentTarget, Node, HookGethealth) * HookgethealthMultiplier) / 30);
  if Mid < 0 then
  begin
    result := 0;
    SmartFreeObject(SmartCurrentTarget, Node);
    exit;
  end;
  Result := Mid;
  SmartFreeObject(SmartCurrentTarget, Node);
end;

(*
R_IsNpcAnimating
~~~~~~~~~~~~~~

.. code-block:: pascal

    R_IsNpcAnimating(IndexID:integer):Boolean;

Returns true if given npc is animating.

.. note::

  by elfyyy

*)
function IsNpcAnimating(IndexID:integer):Boolean;
var
  Mid, BaseX, BaseY, Node, Def: Integer;
begin
  result := false;
  BaseX := (SmartGetFieldInt(SmartCurrentTarget, 0, HookGetBaseX) * -2001773755);
  BaseY := (SmartGetFieldInt(SmartCurrentTarget, 0, HookGetBaseY) * -1712339069);
  Node := SmartGetFieldArrayObject(SmartCurrentTarget, 0, HookNPCs, IndexID);
  Def := SmartGetFieldObject(SmartCurrentTarget, Node, HookNPCDef);
  Mid := (SmartGetFieldInt(SmartCurrentTarget, Node, HookAnimation ) * -722206993);
  if mid > -1 then
    result := true;
  SmartFreeObject(SmartCurrentTarget, Node);
  SmartFreeObject(SmartCurrentTarget, Def);
end;
