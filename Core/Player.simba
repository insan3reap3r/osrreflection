
(*
R_GetAnimation
~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetAnimation: Integer;

Returns your player's animation.

.. note::

  by Drags111

*)
function R_GetAnimation: Integer;
var
  Me: Integer;
begin
  Me := SmartGetFieldObject(SmartCurrentTarget, 0, client_player);
  Result := SmartGetFieldInt(SmartCurrentTarget, me, Actor_animation)  * Actor_animation_Multiplier;
  SmartFreeObject(SmartCurrentTarget, Me);
end;

(*
R_IsAnimating
~~~~~~~~~~~

.. code-block:: pascal

    function R_IsAnimating: Boolean;

Returns true if your player is animating.

.. note::

  by lordsaturn

*)
function R_IsAnimating: Boolean;
begin
  Result := R_GetAnimation > - 1;
end;

(*
R_GetSkillLevel
~~~~~~~

.. code-block:: pascal

    function R_GetSkillLevel(SkillConst: Integer): Integer;

Returns a skill level(Top) specified by Skill(Please use constants).

.. note::

  by mormonman

*)
function R_GetSkillLevel(SkillConst: Integer): Integer;
begin
  Result := SmartGetFieldArrayInt(SmartCurrentTarget, 0, client_levels, skillconst);
end;

(*
R_GetMaxSkillLevel
~~~~~~~

.. code-block:: pascal

    function R_GetMaxSkillLevel(SkillConst: Integer): Integer;

Returns a skill level(Top) specified by Skill(Please use constants).

.. note::

  by ?

*)
function R_GetMaxSkillLevel(SkillConst: Integer): Integer;
begin
  Result := SmartGetFieldArrayInt(SmartCurrentTarget, 0, client_real_levels, skillconst);
end;

(*
R_GetSkillExp
~~~~~~~

.. code-block:: pascal

    R_GetSkillExp(SkillConst: Integer): Integer;

Returns Skill Exp(Top) specified by Skill(Please use constants).

.. note::

  by mormonman

*)
function R_GetSkillExp(SkillConst: Integer): Integer;
begin
  Result := SmartGetFieldArrayInt(SmartCurrentTarget, 0, client_experiences, SkillConst);
end;

(*
R_GetHealth
~~~~~~~~~~~

.. code-block:: pascal

    function R_GetHealth: integer;

Returns the number value of your player's current health.

.. note::

  by ?

*)
function R_GetHealth: extended;
begin
  Result := R_GetSkillLevel(skill_hitpoints);
end;

(*
R_GetMaxHealth
~~~~~~~~~~~

.. code-block:: pascal

    function R_GetMaxHealth: integer;

Returns the max number value of your player's health.

.. note::

  by ?

*)
function R_GetMaxHealth: extended;
var
  Me: Integer;
begin
  Me := SmartGetFieldObject(SmartCurrentTarget, 0, client_player);
  Result := (SmartGetFieldInt(SmartCurrentTarget, me, Actor_maxHealth) * Actor_maxHealth_Multiplier);
  SmartFreeObject(SmartCurrentTarget, me);
end;

(*
R_GetHealthPercent
~~~~~~~~~~~

.. code-block:: pascal

    function R_GetHealthPercent: integer;

Returns the Current health percentage of player.

.. note::

  by elfyyy

*)

function R_GetHealthPercent: extended;
begin
  if R_GetHealth = 0 then
  begin
    Result := 100;
    exit;
  end;
  Result := Round((R_GetHealth / R_GetMaxHealth) * 100);
end;

(*
R_GetRunEnergy
~~~~~~~~~~~

.. code-block:: pascal

    function R_GetRunEnergy: integer;

Returns integer value of current run energy.

.. note::

  by Sirenia

*)
function R_GetRunEnergy: integer;
begin
  Result := SmartGetFieldInt(SmartCurrentTarget, 0, client_run_energy) * client_run_energy_Multiplier ;
end;

(*
R_WaitForAnimation
~~~~~~~~~~~

.. code-block:: pascal

    function R_WaitForAnimation(timeout: integer): boolean;

Returns true when player is animating or when timeout is reached.

.. note::

  by ?

*)
function R_WaitForAnimation(timeout: integer): boolean;
var
  t: integer;
begin
  Result := false;
  MarkTime(t);
  while R_GetAnimation = - 1 do
  begin
    if (TimeFromMark(t) >= timeout) then
      Exit;
  end;
  Result := true;
end;
