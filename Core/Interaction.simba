(*
R_IsUpAction
~~~~~~~~~~~~~~

.. code-block:: pascal

    R_IsUpAction: Boolean;

Returns true if there is uptext and it doesn't say "Walk here".

.. note::

  by Krazy_Meerkat

*)
function R_IsUpAction: Boolean;
begin
  Result:= false;
  if (not(R_GetUpText = '') and not(R_IsUpText('Walk'))) then
    Result:= true;
end;

{*R_ChooseOptionEx
~~~~~~~~~~~~

.. code-block:: pascal

    function R_ChooseOptionEx(Option: String): Boolean;

Clicks on given option in open menu.
If the chooseoption appears twice, avoid close the menu and try again.

.. note::

  by Krazy_Meerkat

*}
function R_ChooseOptionEx(Option: String): Boolean;
var
  Index, MenuX, MenuY, MenuWidth, XOff, YOff, i, l, h, k: Integer;
  Options: TStringArray;
begin
  Options := R_GetMenuOptions;
  if (not R_IsMenuOpen) then
    Exit;
  H := High(Options);
  k:= 0;
  for i := 0 To H do
  begin
    if (Pos(Option, Options[i]) > 0) then
    begin
      inc(k);
      l:= i;
    end;
  end;
  if (k = 1) then
  begin
    Index := R_GetMenuIndex(Option, Options);
  end else
    Index := -1;
  if (Index = -1) then
    Index := R_GetMenuIndex('Cancel', Options);
  MenuX := SmartGetFieldInt(SmartCurrentTarget, 0, client_menuX) * client_menuX_Multiplier + 4;
  MenuY := SmartGetFieldInt(SmartCurrentTarget, 0, client_menuY) * client_menuY_Multiplier + 4;
  MenuWidth := SmartGetFieldInt(SmartCurrentTarget, 0, client_menuWidth) * client_menuWidth_Multiplier;
  XOff := RandomRange(4, MenuWidth - 4);
  YOff := RandomRange(20, 25) + (Index * 15);
  MMouse(MenuX + XOff, MenuY + YOff, 2, 2);
  Sleep(RandomRange(100, 250));
  ClickMouse2(Mouse_Left);
  Result := True;
end;


(*
R_OpenDoorAtTile
~~~~~~~~~~~~~~

.. code-block:: pascal

    R_OpenDoorAtTile(DoorTile: TPoint; TileEdge: String): Boolean;

Attempts to open the door on TileEdge ('N', 'S', 'E' or 'W') of DoorTile.
Returns true if the door was opened.

.. examples:: D = Door [T] = DoorTile

      D
     [T]      R_OpenDoorAtTile(Point(x, y), 'N');


     [T]D     R_OpenDoorAtTile(Point(x, y), 'E');


     [T]      R_OpenDoorAtTile(Point(x, y), 'S');
      D

    D[T]      R_OpenDoorAtTile(Point(x, y), 'W');

.. note::

  by Krazy_Meerkat

*)
function R_OpenDoorAtTile(DoorTile: TPoint; TileEdge: String): Boolean;
var
  Tilex, Tiley: Integer;
  Tile2: TPoint;
begin
  Result:= false;
  Tile2:= DoorTile;
  if (Lowercase(TileEdge) = 'n') then
    Tile2:= R_TileOffsetToMS(Tile2, 0, 64, 100);
  if (Lowercase(TileEdge) = 's') then
    Tile2:= R_TileOffsetToMS(Tile2, 0, -64, 100);
  if (Lowercase(TileEdge) = 'e') then
    Tile2:= R_TileOffsetToMS(Tile2, 64, 0, 100);
  if (Lowercase(TileEdge) = 'w') then
    Tile2:= R_TileOffsetToMS(Tile2, -64, 0, 100);
  if (Tile2.x < 1) then
    Exit;
  Tilex:= Tile2.x;
  Tiley:= Tile2.y;
  MouseBox(Tilex-5, Tiley-5, Tilex+5, Tiley-5, mouse_move);
  wait(103 + random(88));
  if R_IsUpTextMulti(['Close', 'lose', 'ose', 'los', 'Open', 'Ope', 'pen']) then
  begin
    Result:= R_IsUpTextMulti(['Close', 'lose', 'ose', 'los']); //Door is already open
    if not(Result) then
    begin
      ClickMouse2(false);
      wait(103 + random(288));
      Result:= R_ChooseOption('Open');
    end;
  end;
end;

(*
R_OpenDoor
~~~~~~~~~~~~~~

.. code-block:: pascal

    R_OpenDoor(Door: TRSObject; TileEdge: String): Boolean;

Mouse to TileEdge and open Door.
Returns true if Door was opened.

.. examples:: D = Door [T] = DoorTile

      D
     [T]      R_OpenDoor(D, 'N');


     [T]D     R_OpenDoor(D, 'E');


     [T]      R_OpenDoor(D, 'S');
      D

    D[T]      R_OpenDoor(D, 'W');

.. note::

  by Krazy_Meerkat

*)
function R_OpenDoor(Door: TRSObject; TileEdge: String): Boolean;
begin
  Result := R_OpenDoorAtTile(Door.Tile, TileEdge);
end;

(*
R_ChooseOptionTile
~~~~~~~~~~~~~~

.. code-block:: pascal

    R_ChooseOptionTile(Option: String; Tile: TPoint): Boolean;

Moves the mouse randomly in a scaling box around Tile, when an action
is found it will right-click and select Option from the available menu.
Returns true if Option was clicked.

.. note::

  by Krazy_Meerkat

*)
function R_ChooseOptionTile(Option: String; Tile: TPoint): Boolean;
var
  a, i, Tilex, Tiley: Integer;
  Tile2: TPoint;
begin
  Result:= false;
  Tile2:= R_TileToMs(Tile);
  if (Tile2.x = 0) then
    Exit;
  Tilex:= Tile2.x;
  Tiley:= Tile2.y;
  for i:=1 to 45 do
  begin
    a:= i + 5;
    MouseBox(Tilex-a, Tiley-i, Tilex+a, Tiley+i, mouse_move);
    wait(103 + random(88));
    if R_IsUpAction then
    begin
      ClickMouse2(false);
      wait(103 + random(288));
      Result:= R_ChooseOptionEx(Option);
      if Result then
      begin
        i:= 45;
      end;
    end;
  end;
end;

(*
R_ChooseOptionTileUptext
~~~~~~~~~~~~~~

.. code-block:: pascal

    R_ChooseOptionTileUptext(Option, TileUptext: String; Tile: TPoint): Boolean;

Moves the mouse randomly in a scaling box around Tile, when TileUptext
is found it will right-click and select Option from the available menu.
Returns true if Option was clicked.

.. note::

  by Krazy_Meerkat

*)
function R_ChooseOptionTileUptext(Option, TileUptext: String; Tile: TPoint): Boolean;
var
  a, i, Tilex, Tiley: Integer;
  Tile2: TPoint;
begin
  Result:= false;
  Tile2:= R_TileToMs(Tile);
  if (Tile2.x = 0) then
    Exit;
  Tilex:= Tile2.x;
  Tiley:= Tile2.y;
  for i:=1 to 45 do
  begin
    a:= i + 5;
    MouseBox(Tilex-a, Tiley-i, Tilex+a, Tiley+i, mouse_move);
    wait(103 + random(88));
    if R_IsUpText(TileUptext) then
    begin
      ClickMouse2(false);
      wait(103 + random(288));
      Result:= R_ChooseOptionEx(Option);
      if Result then
      begin
        i:= 45;
      end;
    end;
  end;
end;

(*
R_ChooseOptionNpc
~~~~~~~~~~~~~~

.. code-block:: pascal

    R_ChooseOptionNpc(Option: String; Npc: TNPC): Boolean;

Moves the mouse randomly in a scaling box around Npc.Tile, when an action
is found it will right-click and select Option from the available menu.
Returns true if Option was clicked.

.. note::

  by Krazy_Meerkat

*)
function R_ChooseOptionNpc(Option: String; var Npc: TNPC): Boolean;
var
  a, i, Tilex, Tiley: Integer;
  Tile2, OldTile: TPoint;
begin
  Result:= false;
  OldTile:= Npc.Tile;
  for i:= 1 to 45 do
  begin
    Npc:= R_GetTNPC(Npc.Index); //Update the npc's co-ords
    if not(OldTile = Npc.Tile) then
    begin
      i:= 1;
      OldTile:= Npc.Tile;
    end;
    Tile2:= R_TileToMs(Npc.Tile); //Convert to Ms point
    if (Tile2.x = 0) then
      Exit;
    Tilex:= Tile2.x;
    Tiley:= Tile2.y;
    a:= i + 5;
    MouseBox(Tilex-a, Tiley-i, Tilex+a, Tiley+i, mouse_move);
    wait(103 + random(88));
    if R_IsUpText(Npc.Name) then
    begin
      ClickMouse2(false);
      wait(103 + random(288));
      Result:= R_ChooseOptionEx(Option);
      if Result then
      begin
        Npc:= R_GetTNPC(Npc.Index); //Update the npc's co-ords
        i:= 45;
      end;
    end;
  end;
end;


type
  TInventoryItem2 = record
    ID, Quantity, Slot: Integer;
  end;

  TInventoryItemArray2 = Array of TInventoryItem2;

function R_GetWidget2(Index, ChildIndex: Integer): Integer;
begin
  Result := SmartGetFieldArray2DObject(SmartCurrentTarget, 0, client_widgets, Index, ChildIndex);
end;
(*
R_GetInventoryItems2
~~~~~~~~~~~~~~

.. code-block:: pascal

    R_GetInventoryItems2: TInventoryItemArray2;

.. note::

  by Frement

*)
function R_GetInventoryItems2: TInventoryItemArray2;
var
  _Inventory, _InventorySlot, _ItemID, _ItemQuantity: Integer;
begin
  _Inventory := R_GetWidget2(149, 0);
  SetLength(Result, 28);
  for _InventorySlot := 0 to 27 do begin
    _ItemID := SmartGetFieldArrayInt(SmartCurrentTarget, _Inventory, Widget_getItems, _InventorySlot);
    if (_ItemID > 0) then begin
      _ItemQuantity := SmartGetFieldArrayInt(SmartCurrentTarget, _Inventory, Widget_getStackSizes, _InventorySlot);
      with Result[_InventorySlot] do begin
        ID := _ItemID;
        Quantity := _ItemQuantity;
        Slot := _InventorySlot + 1;
      end;
    end;
  end;
  SmartFreeObject(SmartCurrentTarget, _Inventory);
end;

(*
R_InvCount2
~~~~~~~~~~~~~~

.. code-block:: pascal

    R_InvCount2: Integer;

.. note::

  by Frement

*)
function R_InvCount2: Integer;
var
  I: Integer;
  _Items: TInventoryItemArray2;
begin
  _Items := R_GetInventoryItems2;
  for I := 0 to high(_items) do begin
    if (_items[i].ID <> 0) then
      inc(result);
  end;
end;

(*
R_BankItems
~~~~~~~~~~~~~~

.. code-block:: pascal

    R_BankItems(BoothTile: TPoint; DepositAll: Boolean; WithdrawAmount, WithdrawSlot: Integer);

Attempts to bank at BoothTile.
If DepositAll is true, all player items will be deposited.
if WithdrawAmount is 0, no items will be withdrawn.
Bank items will be withdrawn from WithdrawSlot.

.. note::

  by Krazy_Meerkat

.. example::

  R_BankItems(Point(x, y), true, 0, 0); //Open bank & deposit inventory
  R_BankItems(Point(x, y), false, 2, 1); //Open bank & withdraw 2 from slot 1
  R_BankItems(Point(x, y), true, 1, 2); //Open bank, deposit all & withdraw 1 from slot 2

*)
procedure R_BankItems(BoothTile: TPoint; DepositAll: Boolean; WithdrawAmount, WithdrawSlot: Integer);
var
  u: Integer;
  BankPoint: Tpoint;
begin
  for u:= 0 to 100 do
  begin
    R_PerfectPath([BoothTile]);
    sleepandmovemouse(500 + random(500));
    R_ChooseOptionTile('Bank B', BoothTile);
    sleepandmovemouse(1000 + random(1500));
    if BankScreen then u:= 100;
  end;
  if not BankScreen then
  begin
    writeln('[R_BankItems] Didn''t find BankScreen, logging out & terminating.');
    if LoggedIn then LogOut;
    TerminateScript;
  end;
  if DepositAll then
  begin
    for u:= 0 to 100 do
    begin
      wait(70 + random(50));
      QuickDeposit('inv');
      sleepandmovemouse(900 + random(450));
      if (R_InvCount2 = 0) then u:= 100;
    end;
  end;
  if (WithdrawSlot > 0) then
    BankPoint := BankIndexToBankPoint(WithdrawSlot);
  if (WithdrawAmount > 0) then
    Withdraw(BankPoint.x, BankPoint.y, WithdrawAmount);
  wait(70 + random(50));
  CloseBank;
  wait(70 + random(50));
end;