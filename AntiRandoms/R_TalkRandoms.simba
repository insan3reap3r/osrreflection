
var
  TalkRandomIndex: Integer;

(*
R_FindTalk
~~~~~~~~~~

.. code-block:: pascal

  function R_FindTalk: Boolean;

Finds all talking randoms.

.. note::

  by elfyyy

*)
function R_FindTalk: Boolean;
var
  i, f: integer;
  RandList: TStringArray;
  loc: TPoint;
begin
  Result := False;
  loc := R_GetTileGlobal;
  RandList := ['miles', 'giles', 'sandwhich lady', 'drunken dwarf', 'genie', 'highwayman', 'dr jekyll', 'cap''n hand', 'security guard', 'rick turpentine','mysterious old man'];
  for i := 0 to High(R_FoundNpcs) do
  begin
    if (ExactStrInArr(Lowercase(R_FoundNpcs[i].Name), RandList)) then
    begin
      if (R_FoundNpcs[i].Interacting <> R_GetPlayerIndex) then
        Continue;
      TalkRandomIndex:= R_FoundNpcs[i].Index;
      Result := True;
      R_Randoms[13].RandName := R_FoundNpcs[i].Name;
    end;
  end;
end;

(*
R_SolveTalk
~~~~~~~~~~~

.. code-block:: pascal

  function R_FindTalk: Boolean;

Solves all talking randoms.

.. note::

  by elfyyy

*)
function R_SolveTalk: Boolean;
var
  f: integer;
  FoundNPC: TNPC;
  Loc, StartLoc: Tpoint;
begin
  Result := False;
  MarkTime(f);
  FoundNPC:= R_GetTNPC(TalkRandomIndex);
  if (FoundNPC.Name = 'Miles') or (FoundNPC.Name = 'Giles') or (FoundNPC.Name = 'Sandwhich lady') then
    Exit;
  begin
    StartLoc := R_GetTileGlobal;
    MarkTime(f);
    repeat
      FoundNPC:= R_GetTNPC(TalkRandomIndex);
      if (not(R_NearTile(FoundNPC.Tile, 20)) or not(R_IsValidTNPC(FoundNPC)) or (FoundNpc.Interacting <> R_GetPlayerIndex)) then
        Break;
      Loc := FoundNPC.Tile;
      Loc := R_TileToMs(Loc);
      Mmouse(Loc.x, Loc.y, 0, 0);
      if R_WaitUptext('Talk to ' + FoundNPC.Name, 200) then
        ClickMouse2(Mouse_Left)
      else
      begin
        ClickMouse2(Mouse_Right);
        R_ChooseOption('Talk');
      end;
      while R_IsWalking do
        Wait(RandomRange(1000, 1800));
      DoConversation('', True);
      Wait(RandomRange(1400, 2200));
    until TimeFromMark(f) > 30000;
    if R_NearTile(StartLoc, 20) then
    begin
      Result := True
      exit;
    end;
  end;
end;
