{* R_ForesterSolve
+Detection and Solving
+By: Krazy_Meerkat
+
+*}

function R_FindTextEdit(var cx, cy: Integer; txt, fonts: TStringArray; xs, ys, xe, ye: Integer): Boolean;
var
  s, j, i: Integer;
begin
  for j := 0 to High(txt) do
    for i := 0 to High(fonts) do
    begin
      s := BitmapFromText(ToStr(txt[j]), ToStr(fonts[i]));
      if (xs < 0) then xs := 0;
      if (ys < 0) then ys := 0;
      Result := FindBitmapToleranceIn(S, cx, cy, xs, ys, xe, ye, 30);
      FreeBitmap(S);
      if (result) then
        exit;
    end;
end;

function R_FindNPCChatTextMultiEdit(txt: TStringArray; action: fnct_ActionOptions): boolean;
var
  x, y: integer;
  chars: TStringArray;
begin
  chars := [UpChars07, CharsNPC07];
  if (R_FindTextEdit(x, y, txt, chars, MCX1, MCY1, MCX2, MCY2)) then
  begin
    case action of
      Move: MMouse(x, y, 6, 3);
      ClickLeft: Mouse(x, y, 6, 3, mouse_Left);
      ClickRight: Mouse(x, y, 6, 3, mouse_Right);
    end;
    result := true;
    exit;
  end;
end;

(**
 * Author: Krazy_Meerkat
 * Description: Detects if a player is in the random.
 *)
function R_DetectForester: boolean;
var
  me: Tpoint;
begin
  result:= false;
  me:= R_GetTileGlobal;
  if (((me.x > 2594) and (me.x < 2612)) and ((me.y > 4766) and (me.y < 4781))) then
    result:= true;
end;

(**
 * Author: Krazy_Meerkat
 * Description: Walks to the Freaky Forester.
 *)
function R_WalkToFF: boolean;
var
  FMan: TNPC;
begin
  Result:= false;
  if (not loggedIn) then
    exit;
  FMan:= R_FindFreeNpc('Freaky Forester');
  if (R_IsValidTNPC(FMan)) then
  begin
    R_PerfectPath([FMan.Tile]);
    Result:= true;
  end;
end;

(**
 * Author: Krazy_Meerkat
 * Description: Returns true if player talks to Freaky Forester.
 *)
function R_TalkToFF: boolean;
var
  FMan: TNPC;
  MSFMan: TPoint;
  i: Integer;
begin
  Result:= false;
  if (not loggedIn) then
    exit;
  if (result) then
    writeln('[Reflection Anti-Randoms] Talking to Forester');
end;

(**
 * Author: Krazy_Meerkat
 * Description: Gets the pheasant required to kill. Returns the number of tails;
 * 0 if we need to exit through portal, and -1 if nothing was found.
 *)
function R_GetPheasant: integer;
var
  t, i: integer;
  options, options2: TStringArray;
begin
  if (not loggedIn()) then
    exit;
end;

(**
 * Author: Krazy_Meerkat
 * Description: Finds and attacks the pheasant with number of 'numOfTails'.
 *)
function R_KillPheasant(numOfTails: integer): boolean;
var
  CorrectPheasant: TNPC;
  MSPheas: TPoint;
  PheasantID, x, y, t, tmpx, tmpy, bmpPheasant: Integer;
begin
  if (not loggedIn()) then
    exit;
end;

(**
 * Author: Krazy_Meerkat
 * Description: Returns the raw pheasant to the Freaky Forester.
 *)
function R_ReturnPheasant: boolean;
begin
  if (not loggedIn()) then
    exit;
  if (R_TalkToFF) then
  begin
    result := (R_GetPheasant = 0); // if portal text is found
  end else
  begin
    R_WalkToFF;
    wait(200 + random(300));
    if (R_TalkToFF) then
    begin
      result := (R_GetPheasant = 0); // if portal text is found
    end;
  end;
end;

(**
 * Author: Coh3n
 * Description: Exits the random.
 *)
function R_ExitFF: boolean;
var
  tries: integer;
  PortalTile: TPoint;
begin
  if (not loggedIn) then
    exit;
  if (not result) then
    writeln('[Reflection Anti-Randoms] Couldn''t exit Forester');
end;

(**
 * Author: Krazy_Meerkat
 * Description: Solves the random.
 *)
function R_SolveForester: boolean;
var
  t, k, pheasant: integer;
  done: boolean;
begin
  Result:= false;
    exit;
end;

